'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Root2 = require('./Root');

var _Root3 = _interopRequireDefault(_Root2);

var _styles = require('../styles/styles');

var _componentValidators = require('../validators/componentValidators');

var _nodes = require('../utils/nodes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This component creates a new paragraph with every new instance and renders the children.
 * It wraps LineBreak and Image component as intermediate component and calls the corresponding 
 * render method. This behaviour may change depending on new use cases (from open office xml)
 */
var Text = function (_Root) {
  _inherits(Text, _Root);

  function Text(root, props) {
    _classCallCheck(this, Text);

    var _this = _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).call(this, root, props));

    _this.setParent = function (node, childName) {
      return node.parent = node.name === childName ? 'Text' : null;
    };

    _this.root = root;
    _this.props = props;
    _this.adder = _this.root.doc.createP();
    (0, _componentValidators.validateTextProps)(_this.props);
    return _this;
  }

  _createClass(Text, [{
    key: 'appendChild',
    value: function appendChild(child) {
      this.children.push(child);
    }
  }, {
    key: 'removeChild',
    value: function removeChild(child) {
      var index = this.children.indexOf(child);
      this.children.slice(index, 1);
    }
  }, {
    key: 'renderIntermediateComponents',


    /**
     * Render intermediate components (LineBreak, Image and Hr)
     * Not enough use cases (couldn't derive more use cases from open office xml)
     */
    value: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(child, instance) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = child.name;
                _context.next = _context.t0 === 'LineBreak' ? 3 : _context.t0 === 'Image' ? 6 : _context.t0 === 'Hr' ? 10 : 14;
                break;

              case 3:
                _context.next = 5;
                return instance.addLineBreak();

              case 5:
                return _context.abrupt('break', 15);

              case 6:
                // Here we keep track of render() method for Image component as this avoids rendering - 
                // the Image component twice because Document component also calls render() method on all -
                // of its children. So we set its parent to 'Text' component and it calls render() once -
                // and avoids a second render() call by setting its parent to 'Text'. By default, if we -
                // call Image component as an independent component, it has a parent null || 'Document' -
                // so it calls the render() only once.

                this.setParent(child, 'Image');
                // child.name === 'Image' ? (child.parent = 'Text') : (child.parent = null);
                _context.next = 9;
                return instance.addImage(_path2.default.resolve(child.props.src), (0, _styles.applyImageProps)(child.props));

              case 9:
                return _context.abrupt('break', 15);

              case 10:
                // Same thing happening here also!
                this.setParent(child, 'Hr');
                _context.next = 13;
                return instance.addHorizontalLine();

              case 13:
                return _context.abrupt('break', 15);

              case 14:
                return _context.abrupt('break', 15);

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function renderIntermediateComponents(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return renderIntermediateComponents;
    }()
  }, {
    key: 'renderChildren',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(align, styles) {
        var i;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _nodes.alignChildren)(this.adder, align, this.props.align);

                i = 0;

              case 2:
                if (!(i < this.children.length)) {
                  _context2.next = 13;
                  break;
                }

                if (!(typeof this.children[i] === 'string')) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 6;
                return (0, _nodes.renderText)(this.children[i], this.props, styles, this.adder);

              case 6:
                _context2.next = 10;
                break;

              case 8:
                _context2.next = 10;
                return this.renderIntermediateComponents(this.children[i], this.adder);

              case 10:
                i += 1;
                _context2.next = 2;
                break;

              case 13:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function renderChildren(_x3, _x4) {
        return _ref2.apply(this, arguments);
      }

      return renderChildren;
    }()
  }, {
    key: 'render',
    value: function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(align, styles) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.renderChildren(align, styles);

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function render(_x5, _x6) {
        return _ref3.apply(this, arguments);
      }

      return render;
    }()
  }]);

  return Text;
}(_Root3.default);

exports.default = Text;